version: '1.0'
stages:
  - prep
  - lint
  - "pull request"
  - staging
  - production
steps:
  main_clone:
    stage: prep
    title: Cloning main repository...
    type: git-clone
    repo: 'corbolj/voting-app'
    git: github
  GetLastestTags:
    image: everpeace/curl-jq:latest
    stage: prep
    commands:
      - vote_tag=$(curl https://api.github.com/repos/corbolj/vote/releases | jq -S '.[0].tag_name' |  sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/')
      - worker_tag=$(curl https://api.github.com/repos/corbolj/worker/releases | jq -S '.[0].tag_name' |  sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/')
      - result_tag=$(curl https://api.github.com/repos/corbolj/result/releases | jq -S '.[0].tag_name' |  sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/')
      - tests_tag=$(curl https://api.github.com/repos/corbolj/tests/releases | jq -S '.[0].tag_name' |  sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/')
      - cf_export VOTE_TAG=$vote_tag
      - cf_export WORKER_TAG=$worker_tag
      - cf_export RESULT_TAG=$result_tag
      - cf_export TESTS_TAG=$tests_tag
      - current_tag=$(curl https://api.github.com/repos/corbolj/voting-app/releases | jq -S '.[0].tag_name' |  sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/')
      - major_version=$(echo $current_tag | cut -d'.' -f1)
      - minor_version=$(echo $current_tag | cut -d'.' -f2)
      - cur_incremental_version=$(echo $current_tag | cut -d'.' -f3)
      - new_incremental_version=$(($cur_incremental_version+1))
      - new_tag="${major_version}.${minor_version}.${new_incremental_version}"
      - cf_export NEW_TAG=$new_tag
  LintHelmChart:
    stage: "pull request"
    title: Linting Helm Chart
    image: codefresh/cfstep-helm:3.2.3
    commands:
      - bash -c 'cd /codefresh/volume/voting-app/example-voting-app && helm lint'
  DeployPRRelease:
    stage: "pull request"
    title: Create Ephemeral Helm Release for Pull Request
    image: codefresh/cfstep-helm:3.2.3
    working_directory: ./
    environment:
      - CHART_REF=example-voting-app
      - RELEASE_NAME='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}'
      - KUBE_CONTEXT=${{KUBE_CONTEXT}}
      - NAMESPACE=pullrequests
      - DEBUG_CHART=true
      - value_images_result=corbolj/result:${{RESULT_TAG}}
      - value_images_worker=corbolj/worker:${{WORKER_TAG}}
      - value_images_vote=corbolj/vote:${{VOTE_TAG}}
    commands:
      - /opt/bin/release_chart
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  RunPRDVTs:
    stage: "pull request"
    image: 'codefresh/cli:latest'
    commands:
      - codefresh run example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v CF_REPO_OWNER=${{CF_REPO_OWNER}} -v CF_REPO_NAME=${{CF_REPO_NAME}} -v CF_REVISION=${{CF_REVISION}} -v KUBE_CONTEXT='${{KUBE_CONTEXT}}' -v NAMESPACE=pullrequests -v SERVICES='vote result' -v RELEASE_NAME='${{CF_BRANCH_TAG_NORMALIZED}}-${{CF_PULL_REQUEST_NUMBER}}-${{CF_REPO_NAME}}' -v TEST_IMAGE='corbolj/tests:${{TESTS_TAG}}'
    when:
      condition:
        any:
          isPRopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'opened'"
          isPRsynchronized: "'${{CF_PULL_REQUEST_ACTION}}' == 'synchronize'"
          isPRreopen: "'${{CF_PULL_REQUEST_ACTION}}' == 'reopened'"
  # PushChartToHelmRepository:
  #   stage: staging
  #   title: Push Helm Chart to Repository
  #   image: codefresh/cfstep-helm:3.2.3
  #   environment:
  #     - ACTION=push
  #     - CHART_REF=voting-app
  #     - CHART_VERSION=${{NEW_TAG}}
  #   when:
  #     condition:
  #       any:
  #         stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
  #         prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  # UpgradeStagingRelease:
  #   stage: staging
  #   title: Upgrading Staging Release
  #   image: codefresh/cfstep-helm:3.2.3
  #   working_directory: /
  #   environment:
  #     - CHART_REF=voting-app
  #     - CHART_REPO_URL=cm://h.cfcr.io/${{CF_ACCOUNT}}/default
  #     - CHART_VERSION=${{NEW_TAG}}
  #     - RELEASE_NAME=staging-example-voting-app
  #     - KUBE_CONTEXT=${{KUBE_CONTEXT}}
  #     - NAMESPACE=staging
  #     - DEBUG_CHART=true
  #     - CMD_PS=-f /codefresh/volume/example-voting-app/helm_vars/example-voting-app/staging/worker/secrets.yaml
  #     - value_result_image_repository=${{CF_ACCOUNT}}/result
  #     - value_result_image_tag=master-${{CF_SHORT_REVISION}}
  #     - value_result_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
  #     - value_vote_image_repository=${{CF_ACCOUNT}}/vote
  #     - value_vote_image_tag=master-${{CF_SHORT_REVISION}}
  #     - value_vote_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
  #     - value_worker_image_repository=${{CF_ACCOUNT}}/worker
  #     - value_worker_image_tag=master-${{CF_SHORT_REVISION}}
  #     - value_worker_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
  #   commands:
  #     - /opt/bin/release_chart
  #   when:
  #     condition:
  #       any:
  #         stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
  #         prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  # RunStagingDVTs:
  #   stage: staging
  #   title: Running DVTS on Staging Release
  #   image: 'codefresh/cli:latest'
  #   commands:
  #     - echo "corbolj ${{KUBE_NAMESPACE}}"
  #     - codefresh run example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v CF_REPO_OWNER=${{CF_REPO_OWNER}} -v CF_REPO_NAME=${{CF_REPO_NAME}} -v CF_REVISION=${{CF_REVISION}} -v KUBE_CONTEXT='${{KUBE_CONTEXT}}' -v NAMESPACE=staging -v SERVICES='vote result' -v RELEASE_NAME='staging-example-voting-app' -v TEST_IMAGE='corbolj/tests:${{TESTS_TAG}}'
  #   when:
  #     condition:
  #       any:
  #         stageRelease: "'${{CF_PRERELEASE_FLAG}}' == 'true'"
  #         prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  # ProductionApproval:
  #   type: pending-approval
  #   title: Deploy to Production?
  #   description: Deploys current release to production
  #   when:
  #     condition:
  #       all:
  #         prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
  # UpgradeProductionRelease:
  #   stage: production
  #   title: Upgrading Production Release
  #   image: codefresh/cfstep-helm:3.2.3
  #   working_directory: /
  #   environment:
  #     - CHART_REF=voting-app
  #     - CHART_REPO_URL=cm://h.cfcr.io/${{CF_ACCOUNT}}/default
  #     - CHART_VERSION=${{NEW_TAG}}
  #     - RELEASE_NAME=production-example-voting-app
  #     - KUBE_CONTEXT=${{KUBE_CONTEXT}}
  #     - NAMESPACE=production
  #     - DEBUG_CHART=true
  #     - CMD_PS=-f /codefresh/volume/example-voting-app/helm_vars/example-voting-app/production/worker/secrets.yaml
  #     - value_result_image_repository=${{CF_ACCOUNT}}/result
  #     - value_result_image_tag=master-${{CF_SHORT_REVISION}}
  #     - value_result_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
  #     - value_vote_image_repository=${{CF_ACCOUNT}}/vote
  #     - value_vote_image_tag=master-${{CF_SHORT_REVISION}}
  #     - value_vote_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
  #     - value_worker_image_repository=${{CF_ACCOUNT}}/worker
  #     - value_worker_image_tag=master-${{CF_SHORT_REVISION}}
  #     - value_worker_image_pullSecret=codefresh-generated-r.cfcr.io-cfcr-${{KUBE_NAMESPACE}}
  #   commands:
  #     - /opt/bin/release_chart
  #   when:
  #     steps:
  #     - name: ProductionApproval
  #       on:
  #       - approved
  # RunProductionDVTs:
  #   stage: production
  #   title: Running DVTS on Production Release
  #   image: 'codefresh/cli:latest'
  #   commands:
  #     - codefresh run example-voting-app/dvts -b='${{CF_BRANCH}}' -s='${{CF_REVISION}}' -v CF_REPO_OWNER=${{CF_REPO_OWNER}} -v CF_REPO_NAME=${{CF_REPO_NAME}} -v CF_REVISION=${{CF_REVISION}} -v KUBE_CONTEXT='${{KUBE_CONTEXT}}' -v NAMESPACE=production -v SERVICES='vote result' -v RELEASE_NAME='production-example-voting-app' -v TEST_IMAGE='corbolj/tests:${{TESTS_TAG}}'
  #   when:
  #     condition:
  #       all:
  #         prodRelease: "'${{CF_PRERELEASE_FLAG}}' == 'false'"
